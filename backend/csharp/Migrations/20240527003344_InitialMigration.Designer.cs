// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ProtocolContext))]
    [Migration("20240527003344_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.AdditionalUser", b =>
                {
                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.Property<long>("protocolId")
                        .HasColumnType("bigint");

                    b.HasKey("userId", "protocolId");

                    b.HasIndex("protocolId");

                    b.ToTable("AdditionalUsers");
                });

            modelBuilder.Entity("Models.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganizationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("parentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "Carstennstraße 58",
                            City = "Berlin",
                            CreatedDate = new DateTime(2024, 5, 27, 0, 33, 43, 763, DateTimeKind.Utc).AddTicks(395),
                            Name = "Deutsches Rotes Kreuz e.V.",
                            OrganizationType = "Bundesorganisation",
                            PostalCode = "12205",
                            UpdatedDate = new DateTime(2024, 5, 27, 0, 33, 43, 763, DateTimeKind.Utc).AddTicks(398)
                        },
                        new
                        {
                            Id = 2L,
                            Address = "Carstennstraße 58",
                            City = "Berlin",
                            CreatedDate = new DateTime(2024, 5, 27, 0, 33, 43, 763, DateTimeKind.Utc).AddTicks(400),
                            Name = "Test Tochter 1",
                            OrganizationType = "Bundesorganisation",
                            PostalCode = "12205",
                            UpdatedDate = new DateTime(2024, 5, 27, 0, 33, 43, 763, DateTimeKind.Utc).AddTicks(401)
                        },
                        new
                        {
                            Id = 3L,
                            Address = "Carstennstraße 58",
                            City = "Berlin",
                            CreatedDate = new DateTime(2024, 5, 27, 0, 33, 43, 763, DateTimeKind.Utc).AddTicks(412),
                            Name = "Test Tochter 2",
                            OrganizationType = "Bundesorganisation",
                            PostalCode = "12205",
                            UpdatedDate = new DateTime(2024, 5, 27, 0, 33, 43, 763, DateTimeKind.Utc).AddTicks(412),
                            parentId = 2L
                        });
                });

            modelBuilder.Entity("Models.Protocol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReviewComment")
                        .HasColumnType("text");

                    b.Property<long>("TemplateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("Protocols");
                });

            modelBuilder.Entity("Models.ProtocolContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("protocolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("protocolId")
                        .IsUnique();

                    b.ToTable("ProtocolContents");
                });

            modelBuilder.Entity("Models.ProtocolPdfFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("protocolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("protocolId")
                        .IsUnique();

                    b.ToTable("ProtocolPdfFiles");
                });

            modelBuilder.Entity("Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Helfer"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Leiter"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Models.Template", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("organizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("organizationId");

                    b.ToTable("Templates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 5, 27, 0, 33, 44, 346, DateTimeKind.Utc).AddTicks(9628),
                            Description = "Standard-Template für alle Organisationen",
                            Name = "Standard-Template",
                            TemplateContent = "\"{\\n    \\\"Name\\\": \\\"Protokollschema\\\",\\n    \\\"Schema\\\": [\\n        {\\n            \\\"Kategorie\\\": \\\"Schlüssel\\\",\\n            \\\"ID\\\": \\\"EINSATZORT\\\",\\n            \\\"Inputs\\\": [\\n                {\\n                    \\\"Name\\\": \\\"Auftragsnummer\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"number\\\",\\n                    \\\"Label\\\": \\\"Auftrags Nr: \\\",\\n                    \\\"ID\\\": \\\"AUFTRAGSNUMMER\\\",\\n                    \\\"Mandatory\\\": 1\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Alarmschluessel\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"text\\\",\\n                    \\\"Label\\\": \\\"Alarmschlüssel: \\\",\\n                    \\\"ID\\\": \\\"ALARMSCHLUESSEL\\\",\\n                    \\\"Mandatory\\\": 1\\n                },\\n                {\\n                    \\\"Name\\\": \\\"TEst\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"number\\\",\\n                    \\\"Label\\\": \\\"Test: \\\",\\n                    \\\"ID\\\": \\\"TEST\\\",\\n                    \\\"Mandatory\\\": 1\\n                }\\n            ]\\n        },\\n        {\\n            \\\"Kategorie\\\": \\\"Einsatzort\\\",\\n            \\\"ID\\\": \\\"EINSATZORT-KATEGORIE\\\",\\n            \\\"Inputs\\\": [\\n                {\\n                    \\\"Name\\\": \\\"Datum\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"date\\\",\\n                    \\\"Label\\\": \\\"Datum: \\\",\\n                    \\\"ID\\\": \\\"DATUM\\\",\\n                    \\\"Mandatory\\\": 1\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Ort\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"text\\\",\\n                    \\\"Label\\\": \\\"Einsatzort: \\\",\\n                    \\\"ID\\\": \\\"EINSATZORT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Strasse\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"text\\\",\\n                    \\\"Label\\\": \\\"Straße: \\\",\\n                    \\\"ID\\\": \\\"EINSATSSTRASSE\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Hausnummer\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"number\\\",\\n                    \\\"Label\\\": \\\"Hausnummer: \\\",\\n                    \\\"ID\\\": \\\"EINSATZHAUSNR\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"PLZ\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"number\\\",\\n                    \\\"Label\\\": \\\"PLZ: \\\",\\n                    \\\"ID\\\": \\\"EINSATZPLZ\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Alarmzeit\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"time\\\",\\n                    \\\"Label\\\": \\\"Alarmzeit: \\\",\\n                    \\\"ID\\\": \\\"ALARMZEIT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Ankunft_HvO\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"time\\\",\\n                    \\\"Label\\\": \\\"Ankunft HvO: \\\",\\n                    \\\"ID\\\": \\\"ANKUNFT_HVO\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"RTW_NEF\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"number\\\",\\n                    \\\"Label\\\": \\\"RTW/NEF: \\\",\\n                    \\\"ID\\\": \\\"RTW_NEF\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Einsatzende\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"time\\\",\\n                    \\\"Label\\\": \\\"Einsatzende: \\\",\\n                    \\\"ID\\\": \\\"EINSATZENDE\\\"\\n                }\\n            ]\\n        },\\n        {\\n            \\\"Kategorie\\\": \\\"Fahrzeug\\\",\\n            \\\"ID\\\": \\\"FAHRZEUG\\\",\\n            \\\"Inputs\\\": [\\n                {\\n                    \\\"Name\\\": \\\"Einsatzfahrzeug\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"text\\\",\\n                    \\\"Label\\\": \\\"Einsatzfahrzeug: \\\",\\n                    \\\"ID\\\": \\\"EINSATZFAHRZEUG\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"RD\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"text\\\",\\n                    \\\"Label\\\": \\\"RD: \\\",\\n                    \\\"ID\\\": \\\"RD\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Privat_PKW\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Privat PKW: \\\",\\n                    \\\"ID\\\": \\\"PRIVAT_PKW\\\"\\n                }\\n            ]\\n        },\\n        {\\n            \\\"Kategorie\\\": \\\"Einsatzhelfer\\\",\\n            \\\"ID\\\": \\\"EINSATZHELFER\\\",\\n            \\\"Inputs\\\": [\\n                {\\n                    \\\"Name\\\": \\\"Helfer\\\",\\n                    \\\"Element\\\": \\\"dropdownHelper\\\",\\n                    \\\"Type\\\": \\\"dropdown\\\",\\n                    \\\"Options\\\": \\\"/Data/DropdownHelfer.json\\\",\\n                    \\\"Label\\\": \\\"Helfer: \\\",\\n                    \\\"HelperCollection\\\": [\\n                        \\\"HELFERNAMENDD1\\\"\\n                    ],\\n                    \\\"HelperNames\\\": [\\n                        \\\"Mustermann, Max\\\"\\n                    ],\\n                    \\\"ID\\\": \\\"HELFERNAMENDD\\\",\\n                    \\\"Location\\\": \\\"beim Patient\\\"\\n                }\\n            ]\\n        },\\n        {\\n            \\\"Kategorie\\\": \\\"Atemwege\\\",\\n            \\\"ID\\\": \\\"ATEMWEGE\\\",\\n            \\\"Inputs\\\": [\\n                {\\n                    \\\"Name\\\": \\\"Frei\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"radio\\\",\\n                    \\\"RadioGroup\\\": \\\"atemwege\\\",\\n                    \\\"Label\\\": \\\"frei: \\\",\\n                    \\\"ID\\\": \\\"FREI\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Verlegt\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"radio\\\",\\n                    \\\"RadioGroup\\\": \\\"atemwege\\\",\\n                    \\\"Label\\\": \\\"verlegt: \\\",\\n                    \\\"ID\\\": \\\"VERLEGT\\\"\\n                }\\n            ]\\n        },\\n        {\\n            \\\"Kategorie\\\": \\\"Belüftung\\\",\\n            \\\"ID\\\": \\\"BELUEFTUNG\\\",\\n            \\\"Mandatory\\\": 1,\\n            \\\"Inputs\\\": [\\n                {\\n                    \\\"Name\\\": \\\"unauffaellig\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"unauffällig: \\\",\\n                    \\\"ID\\\": \\\"UNAUFFAELLIG\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Zyanose\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Zyanose: \\\",\\n                    \\\"ID\\\": \\\"ZYANOSE\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Rasseln\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Rasseln: \\\",\\n                    \\\"ID\\\": \\\"RASSELN\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Schnappatmung\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Schnappatmung: \\\",\\n                    \\\"ID\\\": \\\"SCHNAPPATMUNG\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Atemnot\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Atemnot: \\\",\\n                    \\\"ID\\\": \\\"ATEMNOT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Hyperventilation\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Hyperventilation: \\\",\\n                    \\\"ID\\\": \\\"HYPERVENTILATION\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Atemstillstand\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Atemstillstand: \\\",\\n                    \\\"ID\\\": \\\"ATEMSTILLSTAND\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Sonstiges\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"text\\\",\\n                    \\\"Label\\\": \\\"Sonstiges: \\\",\\n                    \\\"ID\\\": \\\"SONSTIGES\\\"\\n                }\\n            ]\\n        },\\n        {\\n            \\\"Kategorie\\\": \\\"Circulation\\\",\\n            \\\"ID\\\": \\\"CIRCULATION\\\",\\n            \\\"Inputs\\\": [\\n                {\\n                    \\\"Name\\\": \\\"Puls_Label\\\",\\n                    \\\"Element\\\": \\\"label\\\",\\n                    \\\"Label\\\": \\\"Puls: \\\",\\n                    \\\"ID\\\": \\\"PULS_LABEL\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"regelmaeßig\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"regelmäßig: \\\",\\n                    \\\"ID\\\": \\\"REGELMAESSIG\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"unregelmaeßig\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"unregelmäßig: \\\",\\n                    \\\"ID\\\": \\\"UNREGELMAESSIG\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"gut_tastbar\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"gut tastbar: \\\",\\n                    \\\"ID\\\": \\\"GUT_TASTBAR\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"schlecht_tastbar\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"schlecht tastbar: \\\",\\n                    \\\"ID\\\": \\\"SCHLECHT_TASTBAR\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"nicht_tastbar\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"nicht tastbar: \\\",\\n                    \\\"ID\\\": \\\"NICHT_TASTBAR\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Haut_Label\\\",\\n                    \\\"Element\\\": \\\"label\\\",\\n                    \\\"Label\\\": \\\"Haut: \\\",\\n                    \\\"ID\\\": \\\"HAUT_LABEL\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"rosig\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"rosig: \\\",\\n                    \\\"ID\\\": \\\"ROSIG\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"blass\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"blass: \\\",\\n                    \\\"ID\\\": \\\"BLASS\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"blau\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"blau: \\\",\\n                    \\\"ID\\\": \\\"BLAU\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"rot\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"rot: \\\",\\n                    \\\"ID\\\": \\\"ROT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"warm \\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"warm: \\\",\\n                    \\\"ID\\\": \\\"WARM\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"kalt\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"kalt: \\\",\\n                    \\\"ID\\\": \\\"KALT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"CWERTE_Label\\\",\\n                    \\\"Element\\\": \\\"label\\\",\\n                    \\\"Label\\\": \\\"Werte: \\\",\\n                    \\\"ID\\\": \\\"CWERTE_LABEL\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Puls\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"number\\\",\\n                    \\\"Label\\\": \\\"Puls: \\\",\\n                    \\\"ID\\\": \\\"PULS\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"RR_sys\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"number\\\",\\n                    \\\"Label\\\": \\\"RR sys.: \\\",\\n                    \\\"ID\\\": \\\"RR_SYS\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"RR_dia\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"number\\\",\\n                    \\\"Label\\\": \\\"RR dia.: \\\",\\n                    \\\"ID\\\": \\\"RR_DIA\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"SPO2\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"number\\\",\\n                    \\\"Label\\\": \\\"SPO²: \\\",\\n                    \\\"ID\\\": \\\"SPO2\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"keine_Werte\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"keine Werte: \\\",\\n                    \\\"ID\\\": \\\"KEINE_WERTE\\\"\\n                }\\n            ]\\n        },\\n        {\\n            \\\"Kategorie\\\": \\\"Defizit\\\",\\n            \\\"ID\\\": \\\"DEFIZIT\\\",\\n            \\\"Inputs\\\": [\\n                {\\n                    \\\"Name\\\": \\\"Bewusstein\\\",\\n                    \\\"Element\\\": \\\"label\\\",\\n                    \\\"Label\\\": \\\"Bewusstein: \\\",\\n                    \\\"ID\\\": \\\"BEWUSSTEIN\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"orientiert\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"orientiert: \\\",\\n                    \\\"ID\\\": \\\"ORIENTIERT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"desorientiert\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"desorientiert: \\\",\\n                    \\\"ID\\\": \\\"DESORIENTIERT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"getrübt\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"getrübt: \\\",\\n                    \\\"ID\\\": \\\"GETRÜBT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"bewusstlos\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"bewusstlos: \\\",\\n                    \\\"ID\\\": \\\"BEWUSSTLOS\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"BZ\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"number\\\",\\n                    \\\"Label\\\": \\\"BZ: \\\",\\n                    \\\"ID\\\": \\\"BZ\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Pupillen\\\",\\n                    \\\"Element\\\": \\\"label\\\",\\n                    \\\"Label\\\": \\\"Pupillen: \\\",\\n                    \\\"ID\\\": \\\"PUPILLEN\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"eng\\\",\\n                    \\\"Element\\\": \\\"dropdown\\\",\\n                    \\\"Type\\\": \\\"dropdown\\\",\\n                    \\\"Options\\\": [\\n                        \\\"-\\\",\\n                        \\\"links\\\",\\n                        \\\"rechts\\\",\\n                        \\\"beidseitig\\\"\\n                    ],\\n                    \\\"Label\\\": \\\"eng: \\\",\\n                    \\\"ID\\\": \\\"ENG\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"weit\\\",\\n                    \\\"Element\\\": \\\"dropdown\\\",\\n                    \\\"Type\\\": \\\"dropdown\\\",\\n                    \\\"Options\\\": [\\n                        \\\"-\\\",\\n                        \\\"links\\\",\\n                        \\\"rechts\\\",\\n                        \\\"beidseitig\\\"\\n                    ],\\n                    \\\"Label\\\": \\\"weit: \\\",\\n                    \\\"ID\\\": \\\"WEIT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"keine_Lichtreflexe\\\",\\n                    \\\"Element\\\": \\\"dropdown\\\",\\n                    \\\"Type\\\": \\\"dropdown\\\",\\n                    \\\"Options\\\": [\\n                        \\\"-\\\",\\n                        \\\"links\\\",\\n                        \\\"rechts\\\",\\n                        \\\"beidseitig\\\"\\n                    ],\\n                    \\\"Label\\\": \\\"keine Lichtreflexe: \\\",\\n                    \\\"ID\\\": \\\"KEINE_LICHTREFLEXE\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"entrundet\\\",\\n                    \\\"Element\\\": \\\"dropdown\\\",\\n                    \\\"Type\\\": \\\"dropdown\\\",\\n                    \\\"Options\\\": [\\n                        \\\"-\\\",\\n                        \\\"links\\\",\\n                        \\\"rechts\\\",\\n                        \\\"beidseitig\\\"\\n                    ],\\n                    \\\"Label\\\": \\\"entrundet: \\\",\\n                    \\\"ID\\\": \\\"ENTRUNDET\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Schmerzen\\\",\\n                    \\\"Element\\\": \\\"label\\\",\\n                    \\\"Label\\\": \\\"Schmerzen: \\\",\\n                    \\\"ID\\\": \\\"SCHMERZEN\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"keine\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"keine: \\\",\\n                    \\\"ID\\\": \\\"KEINE\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"leicht\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"leicht: \\\",\\n                    \\\"ID\\\": \\\"LEICHT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"mittel\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"mittel: \\\",\\n                    \\\"ID\\\": \\\"MITTEL\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"stark\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"stark: \\\",\\n                    \\\"ID\\\": \\\"STARK\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"kolikartig\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"kolikartig: \\\",\\n                    \\\"ID\\\": \\\"KOLIKARTIG\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Schmerz_index\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"text\\\",\\n                    \\\"Label\\\": \\\"Index 1 bis 10: \\\",\\n                    \\\"ID\\\": \\\"SCHMERZ_INDEX\\\"\\n                }\\n            ]\\n        },\\n        {\\n            \\\"Kategorie\\\": \\\"Verletzungen\\\",\\n            \\\"ID\\\": \\\"EVERLETZUNGEN\\\",\\n            \\\"Inputs\\\": [\\n                {\\n                    \\\"Name\\\": \\\"unverletzt\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"unverletzt: \\\",\\n                    \\\"ID\\\": \\\"UNVERLETZT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Schädel_Hirn\\\",\\n                    \\\"Element\\\": \\\"dropdown\\\",\\n                    \\\"Type\\\": \\\"dropdown\\\",\\n                    \\\"Options\\\": [\\n                        \\\"-\\\",\\n                        \\\"offen\\\",\\n                        \\\"geschlossen\\\",\\n                        \\\"leicht\\\",\\n                        \\\"mittel\\\",\\n                        \\\"schwer\\\"\\n                    ],\\n                    \\\"Label\\\": \\\"Schädel Hirn: \\\",\\n                    \\\"ID\\\": \\\"SCHÄDEL_HIRN\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Gesicht\\\",\\n                    \\\"Element\\\": \\\"dropdown\\\",\\n                    \\\"Type\\\": \\\"dropdown\\\",\\n                    \\\"Options\\\": [\\n                        \\\"-\\\",\\n                        \\\"offen\\\",\\n                        \\\"geschlossen\\\",\\n                        \\\"leicht\\\",\\n                        \\\"mittel\\\",\\n                        \\\"schwer\\\"\\n                    ],\\n                    \\\"Label\\\": \\\"Gesicht: \\\",\\n                    \\\"ID\\\": \\\"GESICHT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"HWS\\\",\\n                    \\\"Element\\\": \\\"dropdown\\\",\\n                    \\\"Type\\\": \\\"dropdown\\\",\\n                    \\\"Options\\\": [\\n                        \\\"-\\\",\\n                        \\\"offen\\\",\\n                        \\\"geschlossen\\\",\\n                        \\\"leicht\\\",\\n                        \\\"mittel\\\",\\n                        \\\"schwer\\\"\\n                    ],\\n                    \\\"Label\\\": \\\"HWS: \\\",\\n                    \\\"ID\\\": \\\"HWS\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Thorax\\\",\\n                    \\\"Element\\\": \\\"dropdown\\\",\\n                    \\\"Type\\\": \\\"dropdown\\\",\\n                    \\\"Options\\\": [\\n                        \\\"-\\\",\\n                        \\\"offen\\\",\\n                        \\\"geschlossen\\\",\\n                        \\\"leicht\\\",\\n                        \\\"mittel\\\",\\n                        \\\"schwer\\\"\\n                    ],\\n                    \\\"Label\\\": \\\"Thorax: \\\",\\n                    \\\"ID\\\": \\\"THORAX\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Abdomen\\\",\\n                    \\\"Element\\\": \\\"dropdown\\\",\\n                    \\\"Type\\\": \\\"dropdown\\\",\\n                    \\\"Options\\\": [\\n                        \\\"-\\\",\\n                        \\\"offen\\\",\\n                        \\\"geschlossen\\\",\\n                        \\\"leicht\\\",\\n                        \\\"mittel\\\",\\n                        \\\"schwer\\\"\\n                    ],\\n                    \\\"Label\\\": \\\"Abdomen: \\\",\\n                    \\\"ID\\\": \\\"ABDOMEN\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"BWS_LWS\\\",\\n                    \\\"Element\\\": \\\"dropdown\\\",\\n                    \\\"Type\\\": \\\"dropdown\\\",\\n                    \\\"Options\\\": [\\n                        \\\"-\\\",\\n                        \\\"offen\\\",\\n                        \\\"geschlossen\\\",\\n                        \\\"leicht\\\",\\n                        \\\"mittel\\\",\\n                        \\\"schwer\\\"\\n                    ],\\n                    \\\"Label\\\": \\\"BWS / LWS: \\\",\\n                    \\\"ID\\\": \\\"BWS_LWS\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Becken\\\",\\n                    \\\"Element\\\": \\\"dropdown\\\",\\n                    \\\"Type\\\": \\\"dropdown\\\",\\n                    \\\"Options\\\": [\\n                        \\\"-\\\",\\n                        \\\"offen\\\",\\n                        \\\"geschlossen\\\",\\n                        \\\"leicht\\\",\\n                        \\\"mittel\\\",\\n                        \\\"schwer\\\"\\n                    ],\\n                    \\\"Label\\\": \\\"Becken: \\\",\\n                    \\\"ID\\\": \\\"BECKEN\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Obere_Extremität\\\",\\n                    \\\"Element\\\": \\\"dropdown\\\",\\n                    \\\"Type\\\": \\\"dropdown\\\",\\n                    \\\"Options\\\": [\\n                        \\\"-\\\",\\n                        \\\"offen\\\",\\n                        \\\"geschlossen\\\",\\n                        \\\"leicht\\\",\\n                        \\\"mittel\\\",\\n                        \\\"schwer\\\"\\n                    ],\\n                    \\\"Label\\\": \\\"Obere Extremität: \\\",\\n                    \\\"ID\\\": \\\"OBERE_EXTREMITÄT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Untere_Extremität\\\",\\n                    \\\"Element\\\": \\\"dropdown\\\",\\n                    \\\"Type\\\": \\\"dropdown\\\",\\n                    \\\"Options\\\": [\\n                        \\\"-\\\",\\n                        \\\"offen\\\",\\n                        \\\"geschlossen\\\",\\n                        \\\"leicht\\\",\\n                        \\\"mittel\\\",\\n                        \\\"schwer\\\"\\n                    ],\\n                    \\\"Label\\\": \\\"Untere Extremität: \\\",\\n                    \\\"ID\\\": \\\"UNTERE_EXTREMITÄT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Weichteile\\\",\\n                    \\\"Element\\\": \\\"dropdown\\\",\\n                    \\\"Type\\\": \\\"dropdown\\\",\\n                    \\\"Options\\\": [\\n                        \\\"-\\\",\\n                        \\\"offen\\\",\\n                        \\\"geschlossen\\\",\\n                        \\\"leicht\\\",\\n                        \\\"mittel\\\",\\n                        \\\"schwer\\\"\\n                    ],\\n                    \\\"Label\\\": \\\"Weichteile: \\\",\\n                    \\\"ID\\\": \\\"WEICHTEILE\\\"\\n                }\\n            ]\\n        },\\n        {\\n            \\\"Kategorie\\\": \\\"Maßnahmen\\\",\\n            \\\"ID\\\": \\\"MASSNAHMEN\\\",\\n            \\\"Mandatory\\\": 1,\\n            \\\"Inputs\\\": [\\n                {\\n                    \\\"Name\\\": \\\"Atemwege_freimachen\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Atemwege freimachen: \\\",\\n                    \\\"ID\\\": \\\"ATEMWEGE_FREIMACHEN\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Larynxtubus\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Larynxtubus: \\\",\\n                    \\\"ID\\\": \\\"LARYNXTUBUS\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"O2_Gabe\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"O2 Gabe: \\\",\\n                    \\\"ID\\\": \\\"O2_GABE\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"l_min\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"number\\\",\\n                    \\\"Label\\\": \\\"l/min: \\\",\\n                    \\\"ID\\\": \\\"L_MIN\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Brille_Maske_Beutel\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Brille / Maske / Beutel: \\\",\\n                    \\\"ID\\\": \\\"BRILLE_MASKE_BEUTEL\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Sonstiges\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Sonstiges: \\\",\\n                    \\\"ID\\\": \\\"SONSTIGES\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Herzdruckmassage\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Herzdruckmassage: \\\",\\n                    \\\"ID\\\": \\\"HERZDRUCKMASSAGE\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"AED\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"AED: \\\",\\n                    \\\"ID\\\": \\\"AED\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Defibrilliert\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"text\\\",\\n                    \\\"Label\\\": \\\"Defibrilliert: \\\",\\n                    \\\"ID\\\": \\\"DEFIBRILLIERT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Wundversorgung\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Wundversorgung: \\\",\\n                    \\\"ID\\\": \\\"WUNDVERSORGUNG\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"HWS_Fixierung\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"HWS Fixierung: \\\",\\n                    \\\"ID\\\": \\\"HWS_FIXIERUNG\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"NA_Nachforderung\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"NA Nachforderung: \\\",\\n                    \\\"ID\\\": \\\"NA_NACHFORDERUNG\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Seitenlage\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Seitenlage: \\\",\\n                    \\\"ID\\\": \\\"SEITENLAGE\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Oberkoerper_hoch_sitzend\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Oberkörper hoch/sitzend: \\\",\\n                    \\\"ID\\\": \\\"OBERKOERPER_HOCH_SITZEND\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Flachlagerung\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Flachlagerung: \\\",\\n                    \\\"ID\\\": \\\"FLACHLAGERUNG\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Schocklage\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Schocklage: \\\",\\n                    \\\"ID\\\": \\\"SCHOCKLAGE\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Ruhigstellung_mit\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Ruhigstellung mit: \\\",\\n                    \\\"ID\\\": \\\"RUHIGSTELLUNG_MIT\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Absicherung\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Absicherung: \\\",\\n                    \\\"ID\\\": \\\"ABSICHERUNG\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Einweisung_RD\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Einweisung RD: \\\",\\n                    \\\"ID\\\": \\\"EINWEISUNG_RD\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Unterstuetzung_RD\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Unterstützung RD: \\\",\\n                    \\\"ID\\\": \\\"UNTERSTUETZUNG_RD\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"NND_abwartend\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"NND abwartend: \\\",\\n                    \\\"ID\\\": \\\"NNS_ABWARTEND\\\"\\n                }\\n            ]\\n        },\\n        {\\n            \\\"Kategorie\\\": \\\"Einsatzart\\\",\\n            \\\"ID\\\": \\\"EINSATZART\\\",\\n            \\\"Mandatory\\\": 1,\\n            \\\"Inputs\\\": [\\n                {\\n                    \\\"Name\\\": \\\"Verkehrsunfall\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Verkehrsunfall: \\\",\\n                    \\\"ID\\\": \\\"VERKEHRSUNFALL\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Arbeitsunfall\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Arbeitsunfall: \\\",\\n                    \\\"ID\\\": \\\"ARBEITSUNFALL\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Chirurgischer_Notfall\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Chirurgischer Notfall: \\\",\\n                    \\\"ID\\\": \\\"CHIRURGISCHER_NOTFALL\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Gynaekologischer_Notfall\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Gynäkologischer Notfall: \\\",\\n                    \\\"ID\\\": \\\"GYNAEKOLOGISCHER_NOTFALL\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Internistischer_Notfall\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Internistischer Notfall: \\\",\\n                    \\\"ID\\\": \\\"INTERNISTISCHER_NOTFALL\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Fehleinsatz\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Fehleinsatz: \\\",\\n                    \\\"ID\\\": \\\"FEHLEINSATZ\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Paediatrischer_Notfall\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Pädiatrischer Notfall: \\\",\\n                    \\\"ID\\\": \\\"PAEDIATRISCHER_NOTFALL\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Sonstiges\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Sonstiges: \\\",\\n                    \\\"ID\\\": \\\"SONSTIGES\\\"\\n                }\\n            ]\\n        },\\n        {\\n            \\\"Kategorie\\\": \\\"Sonstiges\\\",\\n            \\\"ID\\\": \\\"SONSTIGES\\\",\\n            \\\"Mandatory\\\": 1,\\n            \\\"Inputs\\\": [\\n                {\\n                    \\\"Name\\\": \\\"Feuerwehr\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Feuerwehr: \\\",\\n                    \\\"ID\\\": \\\"FEUERWEHR\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Polizei\\\",\\n                    \\\"Element\\\": \\\"input\\\",\\n                    \\\"Type\\\": \\\"checkbox\\\",\\n                    \\\"Label\\\": \\\"Polizei: \\\",\\n                    \\\"ID\\\": \\\"POLIZEI\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Sonstiger_Text_label\\\",\\n                    \\\"Element\\\": \\\"label\\\",\\n                    \\\"Label\\\": \\\"Sonstige Informationen:  \\\",\\n                    \\\"ID\\\": \\\"SONSTIGER_TEXT_LABEL\\\"\\n                },\\n                {\\n                    \\\"Name\\\": \\\"Sonstiger_Text\\\",\\n                    \\\"Element\\\": \\\"textarea\\\",\\n                    \\\"Rows\\\": 7,\\n                    \\\"Cols\\\": 60,\\n                    \\\"ID\\\": \\\"SONSTIGER_TEXT\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\"",
                            UpdatedDate = new DateTime(2024, 5, 27, 0, 33, 44, 346, DateTimeKind.Utc).AddTicks(9630),
                            organizationId = 1L
                        });
                });

            modelBuilder.Entity("Models.TemplateOrganization", b =>
                {
                    b.Property<long>("organizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("templateId")
                        .HasColumnType("bigint");

                    b.HasKey("organizationId", "templateId");

                    b.HasIndex("templateId");

                    b.ToTable("TemplateOrganizations");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastPasswordChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 5, 27, 0, 33, 43, 939, DateTimeKind.Utc).AddTicks(6339),
                            Email = "superadmin@drk.de",
                            FirstName = "Super",
                            LastName = "Admin",
                            LastPasswordChangeDate = new DateTime(2024, 5, 27, 0, 33, 43, 939, DateTimeKind.Utc).AddTicks(6346),
                            Password = "$2a$11$Ee/XkJJW01O86k1eWT6UAe.oa7/4bofGLU1Gp3ZjRTmRtn3.hbljS",
                            UpdatedDate = new DateTime(2024, 5, 27, 0, 33, 43, 939, DateTimeKind.Utc).AddTicks(6345)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 5, 27, 0, 33, 44, 129, DateTimeKind.Utc).AddTicks(6620),
                            Email = "testhelfer@drk.de",
                            FirstName = "Test",
                            LastName = "Helfer",
                            LastPasswordChangeDate = new DateTime(2024, 5, 27, 0, 33, 44, 129, DateTimeKind.Utc).AddTicks(6629),
                            Password = "$2a$11$9Sj0JHJPXGTFXvPF04qGE.N3QPWGUOKausRcSBq1CmcERJLVU05P6",
                            UpdatedDate = new DateTime(2024, 5, 27, 0, 33, 44, 129, DateTimeKind.Utc).AddTicks(6628)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2024, 5, 27, 0, 33, 44, 346, DateTimeKind.Utc).AddTicks(5493),
                            Email = "testleiter@drk.de",
                            FirstName = "Test",
                            LastName = "Leiter",
                            LastPasswordChangeDate = new DateTime(2024, 5, 27, 0, 33, 44, 346, DateTimeKind.Utc).AddTicks(5500),
                            Password = "$2a$11$GkZ8BZ21oHO8/b44dxLwJO.KGmS5Jv6F3hdB8EwwWJIpaP6guIFoi",
                            UpdatedDate = new DateTime(2024, 5, 27, 0, 33, 44, 346, DateTimeKind.Utc).AddTicks(5499)
                        });
                });

            modelBuilder.Entity("Models.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastLoginAttempt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("UserLoginAttempts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FailedLoginAttempts = 0,
                            LastLoginAttempt = new DateTime(2024, 5, 27, 0, 33, 44, 346, DateTimeKind.Utc).AddTicks(6110),
                            userId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            FailedLoginAttempts = 0,
                            LastLoginAttempt = new DateTime(2024, 5, 27, 0, 33, 44, 346, DateTimeKind.Utc).AddTicks(6113),
                            userId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            FailedLoginAttempts = 0,
                            LastLoginAttempt = new DateTime(2024, 5, 27, 0, 33, 44, 346, DateTimeKind.Utc).AddTicks(6114),
                            userId = 3L
                        });
                });

            modelBuilder.Entity("Models.UserMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceObject")
                        .HasColumnType("text");

                    b.Property<long?>("ReferenceObjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SentFrom")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("Models.UserOrganizationRole", b =>
                {
                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.Property<long>("roleId")
                        .HasColumnType("bigint");

                    b.Property<long>("organizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("userId", "roleId", "organizationId");

                    b.HasIndex("organizationId");

                    b.HasIndex("roleId");

                    b.ToTable("UserOrganizationRoles");

                    b.HasData(
                        new
                        {
                            userId = 1L,
                            roleId = 3L,
                            organizationId = 1L,
                            CreatedDate = new DateTime(2024, 5, 27, 0, 33, 44, 346, DateTimeKind.Utc).AddTicks(6068),
                            Id = 1L,
                            UpdatedDate = new DateTime(2024, 5, 27, 0, 33, 44, 346, DateTimeKind.Utc).AddTicks(6070)
                        },
                        new
                        {
                            userId = 2L,
                            roleId = 1L,
                            organizationId = 3L,
                            CreatedDate = new DateTime(2024, 5, 27, 0, 33, 44, 346, DateTimeKind.Utc).AddTicks(6073),
                            Id = 2L,
                            UpdatedDate = new DateTime(2024, 5, 27, 0, 33, 44, 346, DateTimeKind.Utc).AddTicks(6074)
                        },
                        new
                        {
                            userId = 3L,
                            roleId = 2L,
                            organizationId = 2L,
                            CreatedDate = new DateTime(2024, 5, 27, 0, 33, 44, 346, DateTimeKind.Utc).AddTicks(6076),
                            Id = 3L,
                            UpdatedDate = new DateTime(2024, 5, 27, 0, 33, 44, 346, DateTimeKind.Utc).AddTicks(6077)
                        });
                });

            modelBuilder.Entity("Models.AdditionalUser", b =>
                {
                    b.HasOne("Models.Protocol", "Protocol")
                        .WithMany("AdditionalUser")
                        .HasForeignKey("protocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("AdditionalUser")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Protocol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Protocol", b =>
                {
                    b.HasOne("Models.Organization", "Organization")
                        .WithMany("Protocols")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Template", "Template")
                        .WithMany("Protocols")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("Protocols")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.ProtocolContent", b =>
                {
                    b.HasOne("Models.Protocol", "Protocol")
                        .WithOne("ProtocolContent")
                        .HasForeignKey("Models.ProtocolContent", "protocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Protocol");
                });

            modelBuilder.Entity("Models.ProtocolPdfFile", b =>
                {
                    b.HasOne("Models.Protocol", "Protocol")
                        .WithOne("ProtocolPdfFile")
                        .HasForeignKey("Models.ProtocolPdfFile", "protocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Protocol");
                });

            modelBuilder.Entity("Models.Template", b =>
                {
                    b.HasOne("Models.Organization", "Organization")
                        .WithMany("Templates")
                        .HasForeignKey("organizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Models.TemplateOrganization", b =>
                {
                    b.HasOne("Models.Organization", "Organization")
                        .WithMany("TemplateOrganizations")
                        .HasForeignKey("organizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Template", "Template")
                        .WithMany("TemplateOrganizations")
                        .HasForeignKey("templateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Models.UserLoginAttempt", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithOne("UserLoginAttempt")
                        .HasForeignKey("Models.UserLoginAttempt", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.UserMessage", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("UserMessages")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.UserOrganizationRole", b =>
                {
                    b.HasOne("Models.Organization", "Organization")
                        .WithMany("UserOrganizationRoles")
                        .HasForeignKey("organizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Role", "Role")
                        .WithMany("UserOrganizationRoles")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("UserOrganizationRoles")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Organization", b =>
                {
                    b.Navigation("Protocols");

                    b.Navigation("TemplateOrganizations");

                    b.Navigation("Templates");

                    b.Navigation("UserOrganizationRoles");
                });

            modelBuilder.Entity("Models.Protocol", b =>
                {
                    b.Navigation("AdditionalUser");

                    b.Navigation("ProtocolContent")
                        .IsRequired();

                    b.Navigation("ProtocolPdfFile")
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Role", b =>
                {
                    b.Navigation("UserOrganizationRoles");
                });

            modelBuilder.Entity("Models.Template", b =>
                {
                    b.Navigation("Protocols");

                    b.Navigation("TemplateOrganizations");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("AdditionalUser");

                    b.Navigation("Protocols");

                    b.Navigation("UserLoginAttempt")
                        .IsRequired();

                    b.Navigation("UserMessages");

                    b.Navigation("UserOrganizationRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
