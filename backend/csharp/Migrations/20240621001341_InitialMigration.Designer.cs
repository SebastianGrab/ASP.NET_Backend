// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ProtocolContext))]
    [Migration("20240621001341_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.AdditionalUser", b =>
                {
                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.Property<long>("protocolId")
                        .HasColumnType("bigint");

                    b.HasKey("userId", "protocolId");

                    b.HasIndex("protocolId");

                    b.ToTable("AdditionalUsers");
                });

            modelBuilder.Entity("Models.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganizationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("parentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            Address = "Carstennstraße 58",
                            City = "Berlin",
                            CreatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 329, DateTimeKind.Utc).AddTicks(543),
                            Name = "Deutsches Rotes Kreuz e.V.",
                            OrganizationType = "Bundesorganisation",
                            PostalCode = "12205",
                            UpdatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 329, DateTimeKind.Utc).AddTicks(546)
                        },
                        new
                        {
                            Id = -2L,
                            Address = "Carstennstraße 58",
                            City = "Berlin",
                            CreatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 329, DateTimeKind.Utc).AddTicks(555),
                            Name = "Test Tochter 1",
                            OrganizationType = "Bundesorganisation",
                            PostalCode = "12205",
                            UpdatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 329, DateTimeKind.Utc).AddTicks(556),
                            parentId = -1L
                        },
                        new
                        {
                            Id = -3L,
                            Address = "Carstennstraße 58",
                            City = "Berlin",
                            CreatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 329, DateTimeKind.Utc).AddTicks(558),
                            Name = "Test Tochter 2",
                            OrganizationType = "Bundesorganisation",
                            PostalCode = "12205",
                            UpdatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 329, DateTimeKind.Utc).AddTicks(558),
                            parentId = -2L
                        });
                });

            modelBuilder.Entity("Models.Protocol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInReview")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReviewComment")
                        .HasColumnType("text");

                    b.Property<bool>("ReviewCommentIsRead")
                        .HasColumnType("boolean");

                    b.Property<long>("TemplateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("emailContent")
                        .HasColumnType("text");

                    b.Property<string>("emailSubject")
                        .HasColumnType("text");

                    b.Property<bool?>("sendEmail")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("Protocols");
                });

            modelBuilder.Entity("Models.ProtocolContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("protocolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("protocolId")
                        .IsUnique();

                    b.ToTable("ProtocolContents");
                });

            modelBuilder.Entity("Models.ProtocolPdfFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("protocolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("protocolId")
                        .IsUnique();

                    b.ToTable("ProtocolPdfFiles");
                });

            modelBuilder.Entity("Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            Name = "Helfer"
                        },
                        new
                        {
                            Id = -2L,
                            Name = "Leiter"
                        },
                        new
                        {
                            Id = -3L,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Models.Template", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("organizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("organizationId");

                    b.ToTable("Templates");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            CreatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 992, DateTimeKind.Utc).AddTicks(8917),
                            Description = "Standard-Template für alle Organisationen",
                            Name = "Standard-Template",
                            TemplateContent = "{\"Name\":\"Protokollschema\",\"Schema\":[{\"Kategorie\":\"Schlüssel\",\"ID\":\"SCHLUESSEL\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Alarmschluessel\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Alarmschlüssel:\",\"ID\":\"ALARMSCHLUESSEL\",\"Mandatory\":1,\"Pattern\":\"^[123][0-9]{3}[NBnb]?$\",\"Placeholder\":\"1000N\"},{\"Name\":\"Auftragsnummer\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"AuftragsNr:\",\"ID\":\"AUFTRAGSNUMMER\",\"Mandatory\":1,\"DisableHandlerId\":\"Auftragsnummer-Mandatoryhandler\",\"Pattern\":\"^([0-9]+)$\",\"Placeholder\":\"123456\"},{\"Name\":\"Auftragsnummer-Mandatoryhandler\",\"Element\":\"mandatoryhandler\",\"Type\":\"mandatoryhandler\",\"Label\":\"KeineAuftragsnummer:\",\"ID\":\"Auftragsnummer-Mandatoryhandler\"}]},{\"Kategorie\":\"Einsatzort\",\"ID\":\"EINSATZORT-KATEGORIE\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Datum\",\"Element\":\"input\",\"Type\":\"date\",\"Label\":\"Datum:\",\"Mandatory\":1,\"ID\":\"DATUM\"},{\"Name\":\"Ort\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Einsatzort:\",\"Mandatory\":1,\"ID\":\"EINSATZORT\",\"Placeholder\":\"Stuttgart\"},{\"Name\":\"Strasse\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Straße:\",\"Mandatory\":1,\"ID\":\"EINSATSSTRASSE\",\"Placeholder\":\"Hauptstraße\"},{\"Name\":\"PLZ\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"PLZ:\",\"ID\":\"EINSATZPLZ\"},{\"Name\":\"Alarmzeit\",\"Element\":\"input\",\"Type\":\"time\",\"Mandatory\":1,\"Label\":\"Alarmzeit:\",\"ID\":\"ALARMZEIT\"},{\"Name\":\"Ankunft_HvO\",\"Element\":\"input\",\"Type\":\"time\",\"Mandatory\":1,\"Label\":\"AnkunftHvO:\",\"ID\":\"ANKUNFT_HVO\"},{\"Name\":\"Einsatzende_HvO\",\"Element\":\"input\",\"Type\":\"time\",\"Mandatory\":1,\"Label\":\"EinsatzendeHvO:\",\"ID\":\"EINSATZENDE_HVO\"},{\"Name\":\"RTW_NEF\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"RTW/NEF:\",\"ID\":\"RTW_NEF\"},{\"Name\":\"Ankunft_RTW_NEF\",\"Element\":\"input\",\"Type\":\"time\",\"Label\":\"AnkunftRTW/NEF:\",\"ID\":\"ANKUNFT_RTW_NEF\"}]},{\"Kategorie\":\"Fahrzeug\",\"ID\":\"FAHRZEUG\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Einsatzfahrzeug\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Einsatzfahrzeug:\",\"ID\":\"EINSATZFAHRZEUG\",\"Placeholder\":\"x/xx/x\"},{\"Name\":\"RD\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"RD:\",\"ID\":\"RD\",\"Placeholder\":\"RTW\"},{\"Name\":\"Privat_PKW\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"PrivatPKW:\",\"ID\":\"PRIVAT_PKW\"},{\"Name\":\"Liste_Privat_PKW\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"WeitereprivatePKW:\",\"Placeholder\":\"x-xx-xxxx\",\"ID\":\"LISTE_PRIVAT_PKW\"}]},{\"Kategorie\":\"Einsatzhelfer\",\"ID\":\"EINSATZHELFER\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Helfer\",\"Element\":\"dropdownHelper\",\"Type\":\"dropdown\",\"Options\":\"/Data/DropdownHelfer.json\",\"Label\":\"Helfer:\",\"HelperCollection\":[\"HELFERNAMENDD1\"],\"HelperNames\":[\"\"],\"ID\":\"HELFERNAMENDD\",\"Location\":\"beimPatient\"}]},{\"Kategorie\":\"Atemwege\",\"ID\":\"ATEMWEGE\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Frei\",\"Element\":\"input\",\"Type\":\"radio\",\"RadioGroup\":\"atemwege\",\"Label\":\"frei:\",\"ID\":\"FREI\"},{\"Name\":\"Verlegt\",\"Element\":\"input\",\"Type\":\"radio\",\"RadioGroup\":\"atemwege\",\"Label\":\"verlegt:\",\"ID\":\"VERLEGT\"},{\"Name\":\"Atemweg_Zusatz\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Sonstiges:\",\"ID\":\"ATEMWEGZUSATZ\",\"Placeholder\":\"z.B.verlegtdurch...\"}]},{\"Kategorie\":\"Belüftung\",\"ID\":\"BELUEFTUNG\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"unauffaellig\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"unauffällig:\",\"ID\":\"UNAUFFAELLIG\"},{\"Name\":\"Zyanose\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Zyanose:\",\"ID\":\"ZYANOSE\"},{\"Name\":\"Rasseln\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Rasseln:\",\"ID\":\"RASSELN\"},{\"Name\":\"Schnappatmung\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Schnappatmung:\",\"ID\":\"SCHNAPPATMUNG\"},{\"Name\":\"Atemnot\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Atemnot:\",\"ID\":\"ATEMNOT\"},{\"Name\":\"Hyperventilation\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Hyperventilation:\",\"ID\":\"HYPERVENTILATION\"},{\"Name\":\"Atemstillstand\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Atemstillstand:\",\"ID\":\"ATEMSTILLSTAND\"},{\"Name\":\"Sonstiges\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Sonstiges:\",\"ID\":\"SONSTIGES\"}]},{\"Kategorie\":\"Circulation\",\"ID\":\"CIRCULATION\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Puls_Label\",\"Element\":\"label\",\"Label\":\"Puls:\",\"ID\":\"PULS_LABEL\"},{\"Name\":\"regelmaeßig\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"regelmäßig:\",\"ID\":\"REGELMAESSIG\"},{\"Name\":\"unregelmaeßig\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"unregelmäßig:\",\"ID\":\"UNREGELMAESSIG\"},{\"Name\":\"gut_tastbar\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"guttastbar:\",\"ID\":\"GUT_TASTBAR\"},{\"Name\":\"schlecht_tastbar\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"schlechttastbar:\",\"ID\":\"SCHLECHT_TASTBAR\"},{\"Name\":\"nicht_tastbar\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"nichttastbar:\",\"ID\":\"NICHT_TASTBAR\"},{\"Name\":\"Haut_Label\",\"Element\":\"label\",\"Label\":\"Haut:\",\"ID\":\"HAUT_LABEL\"},{\"Name\":\"rosig\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"rosig:\",\"ID\":\"ROSIG\"},{\"Name\":\"blass\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"blass:\",\"ID\":\"BLASS\"},{\"Name\":\"blau\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"blau:\",\"ID\":\"BLAU\"},{\"Name\":\"rot\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"rot:\",\"ID\":\"ROT\"},{\"Name\":\"warm\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"warm:\",\"ID\":\"WARM\"},{\"Name\":\"kalt\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"kalt:\",\"ID\":\"KALT\"},{\"Name\":\"CWERTE_Label\",\"Element\":\"label\",\"Label\":\"Werte:\",\"ID\":\"CWERTE_LABEL\"},{\"Name\":\"Puls\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"Puls:\",\"ID\":\"PULS\",\"Mandatory\":1},{\"Name\":\"RR_sys\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"RRsys.:\",\"ID\":\"RR_SYS\"},{\"Name\":\"RR_dia\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"RRdia.:\",\"ID\":\"RR_DIA\"},{\"Name\":\"SPO2\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"SPO²:\",\"ID\":\"SPO2\"},{\"Name\":\"keine_Werte\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"keineWerte:\",\"ID\":\"KEINE_WERTE\"}]},{\"Kategorie\":\"Defizit\",\"ID\":\"DEFIZIT\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Bewusstein\",\"Element\":\"label\",\"Label\":\"Bewusstein:\",\"ID\":\"BEWUSSTEIN\"},{\"Name\":\"orientiert\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"orientiert:\",\"ID\":\"ORIENTIERT\"},{\"Name\":\"desorientiert\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"desorientiert:\",\"ID\":\"DESORIENTIERT\"},{\"Name\":\"getrübt\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"getrübt:\",\"ID\":\"GETRÜBT\"},{\"Name\":\"bewusstlos\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"bewusstlos:\",\"ID\":\"BEWUSSTLOS\"},{\"Name\":\"BZ\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"BZ:\",\"ID\":\"BZ\"},{\"Name\":\"Pupillen\",\"Element\":\"label\",\"Label\":\"Pupillen:\",\"ID\":\"PUPILLEN\"},{\"Name\":\"links\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"eng\",\"weit\",\"entrundet\"],\"Label\":\"links:\",\"ID\":\"LINKS\"},{\"Name\":\"rechts\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"eng\",\"weit\",\"entrundet\"],\"Label\":\"rechts:\",\"ID\":\"RECHTS\"},{\"Name\":\"keine_Lichtreflexe\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"links\",\"rechts\",\"beidseitig\"],\"Label\":\"keineLichtreflexe:\",\"ID\":\"KEINE_LICHTREFLEXE\"},{\"Name\":\"Schmerzen\",\"Element\":\"label\",\"Label\":\"Schmerzen:\",\"ID\":\"SCHMERZEN\"},{\"Name\":\"keine\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"keine:\",\"ID\":\"KEINE\"},{\"Name\":\"leicht\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"leicht:\",\"ID\":\"LEICHT\"},{\"Name\":\"mittel\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"mittel:\",\"ID\":\"MITTEL\"},{\"Name\":\"stark\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"stark:\",\"ID\":\"STARK\"},{\"Name\":\"kolikartig\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"kolikartig:\",\"ID\":\"KOLIKARTIG\"},{\"Name\":\"Schmerz_index\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"],\"Label\":\"Index1bis10:\",\"ID\":\"SCHMERZ_INDEX\"}]},{\"Kategorie\":\"Verletzungen\",\"ID\":\"VERLETZUNGEN\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"unverletzt\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"unverletzt:\",\"ID\":\"UNVERLETZT\"},{\"Name\":\"Schädel_Hirn\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"SchädelHirn:\",\"ID\":\"SCHÄDEL_HIRN\"},{\"Name\":\"Gesicht\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"Gesicht:\",\"ID\":\"GESICHT\"},{\"Name\":\"HWS\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"HWS:\",\"ID\":\"HWS\"},{\"Name\":\"Thorax\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"Thorax:\",\"ID\":\"THORAX\"},{\"Name\":\"Abdomen\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"Abdomen:\",\"ID\":\"ABDOMEN\"},{\"Name\":\"BWS_LWS\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"BWS/LWS:\",\"ID\":\"BWS_LWS\"},{\"Name\":\"Becken\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"Becken:\",\"ID\":\"BECKEN\"},{\"Name\":\"Obere_Extremität\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"ObereExtremität:\",\"ID\":\"OBERE_EXTREMITÄT\"},{\"Name\":\"Untere_Extremität\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"UntereExtremität:\",\"ID\":\"UNTERE_EXTREMITÄT\"},{\"Name\":\"Weichteile\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"Weichteile:\",\"ID\":\"WEICHTEILE\"},{\"Name\":\"NACA_Score\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"0-KeineErkrankungoderVerletzung\",\"1-GeringfügigeVerletzungbzw.Funktionsstörung\",\"2-LeichtebismäßigschwereFunktionsstörung\",\"3-Mäßigebisschwere,abernichtlebensbedrohlicheStörung\",\"4-SchwereStörung,beiderdiekurzfristigeEntwicklungeinerLebensbedrohungnichtausgeschlossenwerdenkann\",\"5-AkuteLebensgefahr\",\"6-Atem-und/oderKreislaufstillstand\",\"7-TödlicheVerletzungoderErkrankung\"],\"Label\":\"NACAScore:\",\"ID\":\"NACA_SCORE\"}]},{\"Kategorie\":\"Maßnahmen\",\"ID\":\"MASSNAHMEN\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Atemwege_freimachen\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Atemwegefreimachen:\",\"ID\":\"ATEMWEGE_FREIMACHEN\"},{\"Name\":\"Larynxtubus\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Larynxtubus:\",\"ID\":\"LARYNXTUBUS\"},{\"Name\":\"O2_Gabe\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"O2Gabe:\",\"ID\":\"O2_GABE\"},{\"Name\":\"l_min\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"l/min:\",\"ID\":\"L_MIN\",\"Pattern\":\"\\b([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|250)\\b\",\"Placeholder\":\"5\"},{\"Name\":\"Brille_Maske_Beutel\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Brille/Maske/Beutel:\",\"ID\":\"BRILLE_MASKE_BEUTEL\"},{\"Name\":\"Sonstiges\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Sonstiges:\",\"ID\":\"SONSTIGES\"},{\"Name\":\"Herzdruckmassage\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Herzdruckmassage:\",\"ID\":\"HERZDRUCKMASSAGE\"},{\"Name\":\"AED\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"AED:\",\"ID\":\"AED\"},{\"Name\":\"Defibrilliert\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Defibrilliert:\",\"ID\":\"DEFIBRILLIERT\"},{\"Name\":\"Wundversorgung\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Wundversorgung:\",\"ID\":\"WUNDVERSORGUNG\"},{\"Name\":\"HWS_Fixierung\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"HWSFixierung:\",\"ID\":\"HWS_FIXIERUNG\"},{\"Name\":\"NA_Nachforderung\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"NANachforderung:\",\"ID\":\"NA_NACHFORDERUNG\"},{\"Name\":\"Seitenlage\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Seitenlage:\",\"ID\":\"SEITENLAGE\"},{\"Name\":\"Oberkoerper_hoch_sitzend\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Oberkörperhoch/sitzend:\",\"ID\":\"OBERKOERPER_HOCH_SITZEND\"},{\"Name\":\"Flachlagerung\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Flachlagerung:\",\"ID\":\"FLACHLAGERUNG\"},{\"Name\":\"Schocklage\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Schocklage:\",\"ID\":\"SCHOCKLAGE\"},{\"Name\":\"Ruhigstellung_mit\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Ruhigstellungmit:\",\"ID\":\"RUHIGSTELLUNG_MIT\",\"Pattern\":\"^[a-zA-Z]+$\",\"Placeholder\":\"z.B.Schiene\"},{\"Name\":\"Absicherung\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Absicherung:\",\"ID\":\"ABSICHERUNG\"},{\"Name\":\"Einweisung_RD\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"EinweisungRD:\",\"ID\":\"EINWEISUNG_RD\"},{\"Name\":\"Unterstuetzung_RD\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"UnterstützungRD:\",\"ID\":\"UNTERSTUETZUNG_RD\"},{\"Name\":\"NND_abwartend\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"NNDabwartend:\",\"ID\":\"NNS_ABWARTEND\"}]},{\"Kategorie\":\"Einsatzart\",\"ID\":\"EINSATZART\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Verkehrsunfall\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Verkehrsunfall:\",\"ID\":\"VERKEHRSUNFALL\"},{\"Name\":\"Arbeitsunfall\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Arbeitsunfall:\",\"ID\":\"ARBEITSUNFALL\"},{\"Name\":\"Chirurgischer_Notfall\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"ChirurgischerNotfall:\",\"ID\":\"CHIRURGISCHER_NOTFALL\"},{\"Name\":\"Gynaekologischer_Notfall\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"GynäkologischerNotfall:\",\"ID\":\"GYNAEKOLOGISCHER_NOTFALL\"},{\"Name\":\"Internistischer_Notfall\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"InternistischerNotfall:\",\"ID\":\"INTERNISTISCHER_NOTFALL\"},{\"Name\":\"Fehleinsatz\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Fehleinsatz:\",\"ID\":\"FEHLEINSATZ\"},{\"Name\":\"Paediatrischer_Notfall\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"PädiatrischerNotfall:\",\"ID\":\"PAEDIATRISCHER_NOTFALL\"},{\"Name\":\"Sonstiges\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Sonstiges:\",\"ID\":\"SONSTIGES\"}]},{\"Kategorie\":\"Sonstiges\",\"ID\":\"SONSTIGES\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Feuerwehr\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Feuerwehr:\",\"ID\":\"FEUERWEHR\"},{\"Name\":\"Polizei\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Polizei:\",\"ID\":\"POLIZEI\"},{\"Name\":\"Sonstiger_Text_label\",\"Element\":\"label\",\"Label\":\"SonstigeInformationen:\",\"ID\":\"SONSTIGER_TEXT_LABEL\"},{\"Name\":\"Sonstiger_Text\",\"Element\":\"textarea\",\"Rows\":7,\"Cols\":60,\"ID\":\"SONSTIGER_TEXT\"}]}]}",
                            UpdatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 992, DateTimeKind.Utc).AddTicks(8919),
                            organizationId = -1L
                        });
                });

            modelBuilder.Entity("Models.TemplateOrganization", b =>
                {
                    b.Property<long>("organizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("templateId")
                        .HasColumnType("bigint");

                    b.HasKey("organizationId", "templateId");

                    b.HasIndex("templateId");

                    b.ToTable("TemplateOrganizations");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastPasswordChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            CreatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 514, DateTimeKind.Utc).AddTicks(3998),
                            Email = "superadmin@drk.de",
                            FirstName = "Super",
                            LastName = "Admin",
                            LastPasswordChangeDate = new DateTime(2024, 6, 21, 0, 13, 40, 514, DateTimeKind.Utc).AddTicks(4024),
                            Password = "$2a$11$/ghPxh8geRtsUU7xlvZuH.DGcCqCK.mqmVLuoTHE0jyJpRS1gpurS",
                            UpdatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 514, DateTimeKind.Utc).AddTicks(4023)
                        },
                        new
                        {
                            Id = -2L,
                            CreatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 778, DateTimeKind.Utc).AddTicks(4818),
                            Email = "testhelfer@drk.de",
                            FirstName = "Test",
                            LastName = "Helfer",
                            LastPasswordChangeDate = new DateTime(2024, 6, 21, 0, 13, 40, 778, DateTimeKind.Utc).AddTicks(4824),
                            Password = "$2a$11$h3RnyAhn4xo4rWs5ON92GeP0gRNSeEYphY.fqPTkkFmjd1lKkcNWO",
                            UpdatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 778, DateTimeKind.Utc).AddTicks(4823)
                        },
                        new
                        {
                            Id = -3L,
                            CreatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 992, DateTimeKind.Utc).AddTicks(5650),
                            Email = "testleiter@drk.de",
                            FirstName = "Test",
                            LastName = "Leiter",
                            LastPasswordChangeDate = new DateTime(2024, 6, 21, 0, 13, 40, 992, DateTimeKind.Utc).AddTicks(5658),
                            Password = "$2a$11$jMo3r5jqNnrlA6wkXqd0Q.Nq/ZD9u20r3hR.uHan.IKfCbGTNJPTO",
                            UpdatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 992, DateTimeKind.Utc).AddTicks(5657)
                        });
                });

            modelBuilder.Entity("Models.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastLoginAttempt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("UserLoginAttempts");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            FailedLoginAttempts = 0,
                            LastLoginAttempt = new DateTime(2024, 6, 21, 0, 13, 40, 992, DateTimeKind.Utc).AddTicks(6271),
                            userId = -1L
                        },
                        new
                        {
                            Id = -2L,
                            FailedLoginAttempts = 0,
                            LastLoginAttempt = new DateTime(2024, 6, 21, 0, 13, 40, 992, DateTimeKind.Utc).AddTicks(6273),
                            userId = -2L
                        },
                        new
                        {
                            Id = -3L,
                            FailedLoginAttempts = 0,
                            LastLoginAttempt = new DateTime(2024, 6, 21, 0, 13, 40, 992, DateTimeKind.Utc).AddTicks(6274),
                            userId = -3L
                        });
                });

            modelBuilder.Entity("Models.UserMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceObject")
                        .HasColumnType("text");

                    b.Property<long?>("ReferenceObjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SentFrom")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("Models.UserOrganizationRole", b =>
                {
                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.Property<long>("roleId")
                        .HasColumnType("bigint");

                    b.Property<long>("organizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("userId", "roleId", "organizationId");

                    b.HasIndex("organizationId");

                    b.HasIndex("roleId");

                    b.ToTable("UserOrganizationRoles");

                    b.HasData(
                        new
                        {
                            userId = -1L,
                            roleId = -3L,
                            organizationId = -1L,
                            CreatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 992, DateTimeKind.Utc).AddTicks(6242),
                            Id = -1L,
                            UpdatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 992, DateTimeKind.Utc).AddTicks(6243)
                        },
                        new
                        {
                            userId = -2L,
                            roleId = -1L,
                            organizationId = -3L,
                            CreatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 992, DateTimeKind.Utc).AddTicks(6246),
                            Id = -2L,
                            UpdatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 992, DateTimeKind.Utc).AddTicks(6247)
                        },
                        new
                        {
                            userId = -3L,
                            roleId = -2L,
                            organizationId = -2L,
                            CreatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 992, DateTimeKind.Utc).AddTicks(6249),
                            Id = -3L,
                            UpdatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 992, DateTimeKind.Utc).AddTicks(6249)
                        });
                });

            modelBuilder.Entity("csharp.Models.TemplateVersions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TemplateContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("templateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("templateId");

                    b.ToTable("TemplateVersions");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            CreatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 993, DateTimeKind.Utc).AddTicks(337),
                            TemplateContent = "{\"Name\":\"Protokollschema\",\"Schema\":[{\"Kategorie\":\"Schlüssel\",\"ID\":\"SCHLUESSEL\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Alarmschluessel\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Alarmschlüssel:\",\"ID\":\"ALARMSCHLUESSEL\",\"Mandatory\":1,\"Pattern\":\"^[123][0-9]{3}[NBnb]?$\",\"Placeholder\":\"1000N\"},{\"Name\":\"Auftragsnummer\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"AuftragsNr:\",\"ID\":\"AUFTRAGSNUMMER\",\"Mandatory\":1,\"DisableHandlerId\":\"Auftragsnummer-Mandatoryhandler\",\"Pattern\":\"^([0-9]+)$\",\"Placeholder\":\"123456\"},{\"Name\":\"Auftragsnummer-Mandatoryhandler\",\"Element\":\"mandatoryhandler\",\"Type\":\"mandatoryhandler\",\"Label\":\"KeineAuftragsnummer:\",\"ID\":\"Auftragsnummer-Mandatoryhandler\"}]},{\"Kategorie\":\"Einsatzort\",\"ID\":\"EINSATZORT-KATEGORIE\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Datum\",\"Element\":\"input\",\"Type\":\"date\",\"Label\":\"Datum:\",\"Mandatory\":1,\"ID\":\"DATUM\"},{\"Name\":\"Ort\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Einsatzort:\",\"Mandatory\":1,\"ID\":\"EINSATZORT\",\"Placeholder\":\"Stuttgart\"},{\"Name\":\"Strasse\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Straße:\",\"Mandatory\":1,\"ID\":\"EINSATSSTRASSE\",\"Placeholder\":\"Hauptstraße\"},{\"Name\":\"PLZ\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"PLZ:\",\"ID\":\"EINSATZPLZ\"},{\"Name\":\"Alarmzeit\",\"Element\":\"input\",\"Type\":\"time\",\"Mandatory\":1,\"Label\":\"Alarmzeit:\",\"ID\":\"ALARMZEIT\"},{\"Name\":\"Ankunft_HvO\",\"Element\":\"input\",\"Type\":\"time\",\"Mandatory\":1,\"Label\":\"AnkunftHvO:\",\"ID\":\"ANKUNFT_HVO\"},{\"Name\":\"Einsatzende_HvO\",\"Element\":\"input\",\"Type\":\"time\",\"Mandatory\":1,\"Label\":\"EinsatzendeHvO:\",\"ID\":\"EINSATZENDE_HVO\"},{\"Name\":\"RTW_NEF\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"RTW/NEF:\",\"ID\":\"RTW_NEF\"},{\"Name\":\"Ankunft_RTW_NEF\",\"Element\":\"input\",\"Type\":\"time\",\"Label\":\"AnkunftRTW/NEF:\",\"ID\":\"ANKUNFT_RTW_NEF\"}]},{\"Kategorie\":\"Fahrzeug\",\"ID\":\"FAHRZEUG\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Einsatzfahrzeug\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Einsatzfahrzeug:\",\"ID\":\"EINSATZFAHRZEUG\",\"Placeholder\":\"x/xx/x\"},{\"Name\":\"RD\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"RD:\",\"ID\":\"RD\",\"Placeholder\":\"RTW\"},{\"Name\":\"Privat_PKW\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"PrivatPKW:\",\"ID\":\"PRIVAT_PKW\"},{\"Name\":\"Liste_Privat_PKW\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"WeitereprivatePKW:\",\"Placeholder\":\"x-xx-xxxx\",\"ID\":\"LISTE_PRIVAT_PKW\"}]},{\"Kategorie\":\"Einsatzhelfer\",\"ID\":\"EINSATZHELFER\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Helfer\",\"Element\":\"dropdownHelper\",\"Type\":\"dropdown\",\"Options\":\"/Data/DropdownHelfer.json\",\"Label\":\"Helfer:\",\"HelperCollection\":[\"HELFERNAMENDD1\"],\"HelperNames\":[\"\"],\"ID\":\"HELFERNAMENDD\",\"Location\":\"beimPatient\"}]},{\"Kategorie\":\"Atemwege\",\"ID\":\"ATEMWEGE\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Frei\",\"Element\":\"input\",\"Type\":\"radio\",\"RadioGroup\":\"atemwege\",\"Label\":\"frei:\",\"ID\":\"FREI\"},{\"Name\":\"Verlegt\",\"Element\":\"input\",\"Type\":\"radio\",\"RadioGroup\":\"atemwege\",\"Label\":\"verlegt:\",\"ID\":\"VERLEGT\"},{\"Name\":\"Atemweg_Zusatz\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Sonstiges:\",\"ID\":\"ATEMWEGZUSATZ\",\"Placeholder\":\"z.B.verlegtdurch...\"}]},{\"Kategorie\":\"Belüftung\",\"ID\":\"BELUEFTUNG\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"unauffaellig\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"unauffällig:\",\"ID\":\"UNAUFFAELLIG\"},{\"Name\":\"Zyanose\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Zyanose:\",\"ID\":\"ZYANOSE\"},{\"Name\":\"Rasseln\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Rasseln:\",\"ID\":\"RASSELN\"},{\"Name\":\"Schnappatmung\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Schnappatmung:\",\"ID\":\"SCHNAPPATMUNG\"},{\"Name\":\"Atemnot\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Atemnot:\",\"ID\":\"ATEMNOT\"},{\"Name\":\"Hyperventilation\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Hyperventilation:\",\"ID\":\"HYPERVENTILATION\"},{\"Name\":\"Atemstillstand\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Atemstillstand:\",\"ID\":\"ATEMSTILLSTAND\"},{\"Name\":\"Sonstiges\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Sonstiges:\",\"ID\":\"SONSTIGES\"}]},{\"Kategorie\":\"Circulation\",\"ID\":\"CIRCULATION\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Puls_Label\",\"Element\":\"label\",\"Label\":\"Puls:\",\"ID\":\"PULS_LABEL\"},{\"Name\":\"regelmaeßig\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"regelmäßig:\",\"ID\":\"REGELMAESSIG\"},{\"Name\":\"unregelmaeßig\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"unregelmäßig:\",\"ID\":\"UNREGELMAESSIG\"},{\"Name\":\"gut_tastbar\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"guttastbar:\",\"ID\":\"GUT_TASTBAR\"},{\"Name\":\"schlecht_tastbar\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"schlechttastbar:\",\"ID\":\"SCHLECHT_TASTBAR\"},{\"Name\":\"nicht_tastbar\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"nichttastbar:\",\"ID\":\"NICHT_TASTBAR\"},{\"Name\":\"Haut_Label\",\"Element\":\"label\",\"Label\":\"Haut:\",\"ID\":\"HAUT_LABEL\"},{\"Name\":\"rosig\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"rosig:\",\"ID\":\"ROSIG\"},{\"Name\":\"blass\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"blass:\",\"ID\":\"BLASS\"},{\"Name\":\"blau\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"blau:\",\"ID\":\"BLAU\"},{\"Name\":\"rot\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"rot:\",\"ID\":\"ROT\"},{\"Name\":\"warm\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"warm:\",\"ID\":\"WARM\"},{\"Name\":\"kalt\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"kalt:\",\"ID\":\"KALT\"},{\"Name\":\"CWERTE_Label\",\"Element\":\"label\",\"Label\":\"Werte:\",\"ID\":\"CWERTE_LABEL\"},{\"Name\":\"Puls\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"Puls:\",\"ID\":\"PULS\",\"Mandatory\":1},{\"Name\":\"RR_sys\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"RRsys.:\",\"ID\":\"RR_SYS\"},{\"Name\":\"RR_dia\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"RRdia.:\",\"ID\":\"RR_DIA\"},{\"Name\":\"SPO2\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"SPO²:\",\"ID\":\"SPO2\"},{\"Name\":\"keine_Werte\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"keineWerte:\",\"ID\":\"KEINE_WERTE\"}]},{\"Kategorie\":\"Defizit\",\"ID\":\"DEFIZIT\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Bewusstein\",\"Element\":\"label\",\"Label\":\"Bewusstein:\",\"ID\":\"BEWUSSTEIN\"},{\"Name\":\"orientiert\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"orientiert:\",\"ID\":\"ORIENTIERT\"},{\"Name\":\"desorientiert\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"desorientiert:\",\"ID\":\"DESORIENTIERT\"},{\"Name\":\"getrübt\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"getrübt:\",\"ID\":\"GETRÜBT\"},{\"Name\":\"bewusstlos\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"bewusstlos:\",\"ID\":\"BEWUSSTLOS\"},{\"Name\":\"BZ\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"BZ:\",\"ID\":\"BZ\"},{\"Name\":\"Pupillen\",\"Element\":\"label\",\"Label\":\"Pupillen:\",\"ID\":\"PUPILLEN\"},{\"Name\":\"links\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"eng\",\"weit\",\"entrundet\"],\"Label\":\"links:\",\"ID\":\"LINKS\"},{\"Name\":\"rechts\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"eng\",\"weit\",\"entrundet\"],\"Label\":\"rechts:\",\"ID\":\"RECHTS\"},{\"Name\":\"keine_Lichtreflexe\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"links\",\"rechts\",\"beidseitig\"],\"Label\":\"keineLichtreflexe:\",\"ID\":\"KEINE_LICHTREFLEXE\"},{\"Name\":\"Schmerzen\",\"Element\":\"label\",\"Label\":\"Schmerzen:\",\"ID\":\"SCHMERZEN\"},{\"Name\":\"keine\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"keine:\",\"ID\":\"KEINE\"},{\"Name\":\"leicht\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"leicht:\",\"ID\":\"LEICHT\"},{\"Name\":\"mittel\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"mittel:\",\"ID\":\"MITTEL\"},{\"Name\":\"stark\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"stark:\",\"ID\":\"STARK\"},{\"Name\":\"kolikartig\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"kolikartig:\",\"ID\":\"KOLIKARTIG\"},{\"Name\":\"Schmerz_index\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"],\"Label\":\"Index1bis10:\",\"ID\":\"SCHMERZ_INDEX\"}]},{\"Kategorie\":\"Verletzungen\",\"ID\":\"VERLETZUNGEN\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"unverletzt\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"unverletzt:\",\"ID\":\"UNVERLETZT\"},{\"Name\":\"Schädel_Hirn\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"SchädelHirn:\",\"ID\":\"SCHÄDEL_HIRN\"},{\"Name\":\"Gesicht\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"Gesicht:\",\"ID\":\"GESICHT\"},{\"Name\":\"HWS\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"HWS:\",\"ID\":\"HWS\"},{\"Name\":\"Thorax\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"Thorax:\",\"ID\":\"THORAX\"},{\"Name\":\"Abdomen\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"Abdomen:\",\"ID\":\"ABDOMEN\"},{\"Name\":\"BWS_LWS\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"BWS/LWS:\",\"ID\":\"BWS_LWS\"},{\"Name\":\"Becken\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"Becken:\",\"ID\":\"BECKEN\"},{\"Name\":\"Obere_Extremität\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"ObereExtremität:\",\"ID\":\"OBERE_EXTREMITÄT\"},{\"Name\":\"Untere_Extremität\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"UntereExtremität:\",\"ID\":\"UNTERE_EXTREMITÄT\"},{\"Name\":\"Weichteile\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"-\",\"offen\",\"geschlossen\",\"leicht\",\"mittel\",\"schwer\"],\"Label\":\"Weichteile:\",\"ID\":\"WEICHTEILE\"},{\"Name\":\"NACA_Score\",\"Element\":\"dropdown\",\"Type\":\"dropdown\",\"Options\":[\"0-KeineErkrankungoderVerletzung\",\"1-GeringfügigeVerletzungbzw.Funktionsstörung\",\"2-LeichtebismäßigschwereFunktionsstörung\",\"3-Mäßigebisschwere,abernichtlebensbedrohlicheStörung\",\"4-SchwereStörung,beiderdiekurzfristigeEntwicklungeinerLebensbedrohungnichtausgeschlossenwerdenkann\",\"5-AkuteLebensgefahr\",\"6-Atem-und/oderKreislaufstillstand\",\"7-TödlicheVerletzungoderErkrankung\"],\"Label\":\"NACAScore:\",\"ID\":\"NACA_SCORE\"}]},{\"Kategorie\":\"Maßnahmen\",\"ID\":\"MASSNAHMEN\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Atemwege_freimachen\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Atemwegefreimachen:\",\"ID\":\"ATEMWEGE_FREIMACHEN\"},{\"Name\":\"Larynxtubus\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Larynxtubus:\",\"ID\":\"LARYNXTUBUS\"},{\"Name\":\"O2_Gabe\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"O2Gabe:\",\"ID\":\"O2_GABE\"},{\"Name\":\"l_min\",\"Element\":\"input\",\"Type\":\"number\",\"Label\":\"l/min:\",\"ID\":\"L_MIN\",\"Pattern\":\"\\b([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|250)\\b\",\"Placeholder\":\"5\"},{\"Name\":\"Brille_Maske_Beutel\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Brille/Maske/Beutel:\",\"ID\":\"BRILLE_MASKE_BEUTEL\"},{\"Name\":\"Sonstiges\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Sonstiges:\",\"ID\":\"SONSTIGES\"},{\"Name\":\"Herzdruckmassage\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Herzdruckmassage:\",\"ID\":\"HERZDRUCKMASSAGE\"},{\"Name\":\"AED\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"AED:\",\"ID\":\"AED\"},{\"Name\":\"Defibrilliert\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Defibrilliert:\",\"ID\":\"DEFIBRILLIERT\"},{\"Name\":\"Wundversorgung\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Wundversorgung:\",\"ID\":\"WUNDVERSORGUNG\"},{\"Name\":\"HWS_Fixierung\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"HWSFixierung:\",\"ID\":\"HWS_FIXIERUNG\"},{\"Name\":\"NA_Nachforderung\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"NANachforderung:\",\"ID\":\"NA_NACHFORDERUNG\"},{\"Name\":\"Seitenlage\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Seitenlage:\",\"ID\":\"SEITENLAGE\"},{\"Name\":\"Oberkoerper_hoch_sitzend\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Oberkörperhoch/sitzend:\",\"ID\":\"OBERKOERPER_HOCH_SITZEND\"},{\"Name\":\"Flachlagerung\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Flachlagerung:\",\"ID\":\"FLACHLAGERUNG\"},{\"Name\":\"Schocklage\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Schocklage:\",\"ID\":\"SCHOCKLAGE\"},{\"Name\":\"Ruhigstellung_mit\",\"Element\":\"input\",\"Type\":\"text\",\"Label\":\"Ruhigstellungmit:\",\"ID\":\"RUHIGSTELLUNG_MIT\",\"Pattern\":\"^[a-zA-Z]+$\",\"Placeholder\":\"z.B.Schiene\"},{\"Name\":\"Absicherung\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Absicherung:\",\"ID\":\"ABSICHERUNG\"},{\"Name\":\"Einweisung_RD\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"EinweisungRD:\",\"ID\":\"EINWEISUNG_RD\"},{\"Name\":\"Unterstuetzung_RD\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"UnterstützungRD:\",\"ID\":\"UNTERSTUETZUNG_RD\"},{\"Name\":\"NND_abwartend\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"NNDabwartend:\",\"ID\":\"NNS_ABWARTEND\"}]},{\"Kategorie\":\"Einsatzart\",\"ID\":\"EINSATZART\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Verkehrsunfall\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Verkehrsunfall:\",\"ID\":\"VERKEHRSUNFALL\"},{\"Name\":\"Arbeitsunfall\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Arbeitsunfall:\",\"ID\":\"ARBEITSUNFALL\"},{\"Name\":\"Chirurgischer_Notfall\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"ChirurgischerNotfall:\",\"ID\":\"CHIRURGISCHER_NOTFALL\"},{\"Name\":\"Gynaekologischer_Notfall\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"GynäkologischerNotfall:\",\"ID\":\"GYNAEKOLOGISCHER_NOTFALL\"},{\"Name\":\"Internistischer_Notfall\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"InternistischerNotfall:\",\"ID\":\"INTERNISTISCHER_NOTFALL\"},{\"Name\":\"Fehleinsatz\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Fehleinsatz:\",\"ID\":\"FEHLEINSATZ\"},{\"Name\":\"Paediatrischer_Notfall\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"PädiatrischerNotfall:\",\"ID\":\"PAEDIATRISCHER_NOTFALL\"},{\"Name\":\"Sonstiges\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Sonstiges:\",\"ID\":\"SONSTIGES\"}]},{\"Kategorie\":\"Sonstiges\",\"ID\":\"SONSTIGES\",\"MARKING\":false,\"Inputs\":[{\"Name\":\"Feuerwehr\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Feuerwehr:\",\"ID\":\"FEUERWEHR\"},{\"Name\":\"Polizei\",\"Element\":\"input\",\"Type\":\"checkbox\",\"Label\":\"Polizei:\",\"ID\":\"POLIZEI\"},{\"Name\":\"Sonstiger_Text_label\",\"Element\":\"label\",\"Label\":\"SonstigeInformationen:\",\"ID\":\"SONSTIGER_TEXT_LABEL\"},{\"Name\":\"Sonstiger_Text\",\"Element\":\"textarea\",\"Rows\":7,\"Cols\":60,\"ID\":\"SONSTIGER_TEXT\"}]}]}",
                            UpdatedDate = new DateTime(2024, 6, 21, 0, 13, 40, 993, DateTimeKind.Utc).AddTicks(338),
                            templateId = -1L
                        });
                });

            modelBuilder.Entity("Models.AdditionalUser", b =>
                {
                    b.HasOne("Models.Protocol", "Protocol")
                        .WithMany("AdditionalUser")
                        .HasForeignKey("protocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("AdditionalUser")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Protocol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Protocol", b =>
                {
                    b.HasOne("Models.Organization", "Organization")
                        .WithMany("Protocols")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Template", "Template")
                        .WithMany("Protocols")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("Protocols")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.ProtocolContent", b =>
                {
                    b.HasOne("Models.Protocol", "Protocol")
                        .WithOne("ProtocolContent")
                        .HasForeignKey("Models.ProtocolContent", "protocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Protocol");
                });

            modelBuilder.Entity("Models.ProtocolPdfFile", b =>
                {
                    b.HasOne("Models.Protocol", "Protocol")
                        .WithOne("ProtocolPdfFile")
                        .HasForeignKey("Models.ProtocolPdfFile", "protocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Protocol");
                });

            modelBuilder.Entity("Models.Template", b =>
                {
                    b.HasOne("Models.Organization", "Organization")
                        .WithMany("Templates")
                        .HasForeignKey("organizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Models.TemplateOrganization", b =>
                {
                    b.HasOne("Models.Organization", "Organization")
                        .WithMany("TemplateOrganizations")
                        .HasForeignKey("organizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Template", "Template")
                        .WithMany("TemplateOrganizations")
                        .HasForeignKey("templateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Models.UserLoginAttempt", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithOne("UserLoginAttempt")
                        .HasForeignKey("Models.UserLoginAttempt", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.UserMessage", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("UserMessages")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.UserOrganizationRole", b =>
                {
                    b.HasOne("Models.Organization", "Organization")
                        .WithMany("UserOrganizationRoles")
                        .HasForeignKey("organizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Role", "Role")
                        .WithMany("UserOrganizationRoles")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("UserOrganizationRoles")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("csharp.Models.TemplateVersions", b =>
                {
                    b.HasOne("Models.Template", "Template")
                        .WithMany("TemplateVersions")
                        .HasForeignKey("templateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Models.Organization", b =>
                {
                    b.Navigation("Protocols");

                    b.Navigation("TemplateOrganizations");

                    b.Navigation("Templates");

                    b.Navigation("UserOrganizationRoles");
                });

            modelBuilder.Entity("Models.Protocol", b =>
                {
                    b.Navigation("AdditionalUser");

                    b.Navigation("ProtocolContent")
                        .IsRequired();

                    b.Navigation("ProtocolPdfFile")
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Role", b =>
                {
                    b.Navigation("UserOrganizationRoles");
                });

            modelBuilder.Entity("Models.Template", b =>
                {
                    b.Navigation("Protocols");

                    b.Navigation("TemplateOrganizations");

                    b.Navigation("TemplateVersions");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("AdditionalUser");

                    b.Navigation("Protocols");

                    b.Navigation("UserLoginAttempt")
                        .IsRequired();

                    b.Navigation("UserMessages");

                    b.Navigation("UserOrganizationRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
